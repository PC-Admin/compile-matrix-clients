---

- name: Record the public SSH key into a variable
  set_fact:
    public_ssh_key: "{{ lookup('file', '{{ public_ssh_key_file }}') }}"

- debug:
    msg: "The public SSH key to check for: {{ public_ssh_key }}"

- name: Collect SSH keys info from DigitalOcean Account
  community.digitalocean.digital_ocean_sshkey_info:
    oauth_token: '{{ do_api_token }}'
  register: ssh_keys

- debug:
    msg: "{{ ssh_keys }}"

- name: Build an array with the correct SSH ID
  set_fact:
    ssh_key_id_array: "{{ ssh_key_id_array }} + [ '{{ item.id }}' ]"
  when: item.public_key == public_ssh_key
  loop: "{{ ssh_keys.data|flatten(levels=1) }}"

- debug:
    msg: "{{ ssh_key_id_array }}"

- name: Spawn a new Digital Ocean Droplet, collect the IPv4+IPv6 addresses
  community.digitalocean.digital_ocean_droplet:
    state: present
    name: 'compile-droplet'
    oauth_token: '{{ do_api_token }}'
    size: '{{ slug_size }}'
    ssh_keys: '{{ ssh_key_id_array }}'
    region: '{{ do_droplet_region }}'
    image: '{{ do_image_master }}'
    ipv6: yes
    wait: yes
    unique_name: yes
  register: new_server_info

- debug:
    msg: "{{ new_server_info }}"

- name: Assign DigitalOcean droplet ID to a variable
  set_fact:
    do_droplet_id: "{{ new_server_info.data.droplet.id }}"

- name: Assign server IPv4 to a variable
  set_fact:
    server_ipv4: "{{ new_server_info.data.droplet.networks.v4[0].ip_address }}"
  when: new_server_info.data.droplet.networks.v4[0].type == "public"

- name: Assign server IPv4 to a variable
  set_fact:
    server_ipv4: "{{ new_server_info.data.droplet.networks.v4[1].ip_address }}"
  when: new_server_info.data.droplet.networks.v4[1].type == "public"

- name: Assign server IPv6 to a variable
  set_fact:
    server_ipv6: "{{ new_server_info.data.droplet.networks.v6[0].ip_address }}"
  when: new_server_info.data.droplet.networks.v6[0].type == "public"